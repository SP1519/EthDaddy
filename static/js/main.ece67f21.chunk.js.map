{"version":3,"sources":["assets/logo.svg","components/Navigation.js","components/Search.js","components/Domain.js","App.js","reportWebVitals.js","index.js"],"names":["Navigation","account","setAccount","connectHandler","window","ethereum","request","method","accounts","ethers","utils","getAddress","className","src","logo","alt","type","slice","onClick","Search","placeholder","Domain","domain","ethDaddy","provider","id","useState","owner","setOwner","hasSold","setHasSold","getOwner","isOwned","ownerOf","buyHandler","getSigner","signer","connect","mint","value","cost","transaction","wait","useEffect","name","formatUnits","toString","App","setProvider","setETHDaddy","domains","setDomains","loadBlockchainData","providers","Web3Provider","getNetwork","network","console","log","Contract","config","chainId","ETHDaddy","address","maxSupply","i","getDomain","push","on","map","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.ece67f21.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.4d5d0a83.svg\";","import { ethers } from 'ethers';\r\nimport logo from '../assets/logo.svg';\r\n\r\nconst Navigation = ({ account, setAccount }) => {\r\n  const connectHandler = async () => {\r\n    const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\r\n    const account = ethers.utils.getAddress(accounts[0])\r\n    setAccount(account);\r\n  }\r\n\r\n  return (\r\n    <nav>\r\n        <div className=\"nav__brand\">\r\n          <img src={logo} alt=\"logo\" />\r\n          <h1>ETH Daddy</h1>\r\n          <ul className=\"nav__links\">\r\n            <li>abc</li>\r\n            <li>abc</li>\r\n            <li>abc</li>\r\n            <li>abc</li>\r\n          </ul>\r\n        </div>\r\n\r\n        {account ? (\r\n          <button type=\"button\" className=\"nav__connect\">\r\n            {account.slice(0,6) + \"...\" + account.slice(38,42)}\r\n          </button>\r\n        ) : (\r\n          <button type=\"button\" className=\"nav__connect\" onClick={connectHandler}>\r\n          Connect\r\n\r\n          </button>\r\n        )}\r\n\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navigation;","const Search = () => {\r\n  return (\r\n    <header>\r\n      <p className=\"header__subtitle\">Seek and buy available domain names</p>\r\n      <h2 className=\"header__title\">It all begins with a domain name.</h2>\r\n      <div className=\"header__search\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"header__input\"\r\n          placeholder=\"Find your domain\"\r\n        />\r\n        <button\r\n          type=\"button\"\r\n          className='header__button'\r\n        >\r\n          Buy It\r\n        </button>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Search;","import { useEffect, useState } from 'react'\r\nimport { ethers } from 'ethers'\r\n\r\nconst Domain = ({ domain, ethDaddy, provider, id }) => {\r\n    const [owner, setOwner] = useState(null)\r\n    const [hasSold, setHasSold] = useState(false)\r\n\r\n    const getOwner = async () => {\r\n      if (domain.isOwned || hasSold) {\r\n        const owner = await ethDaddy.ownerOf(id)\r\n        setOwner(owner)\r\n      }\r\n    }\r\n\r\n    const buyHandler = async () => {\r\n      const signer = await provider.getSigner()\r\n      const transaction = await ethDaddy.connect(signer).mint(id, {value: domain.cost})\r\n      await transaction.wait()\r\n    \r\n      setHasSold(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n      getOwner()\r\n    }, [hasSold])\r\n\r\n  return (\r\n    <div className='card'>\r\n      <div className='card__info'>\r\n        <h3>\r\n          {domain.isOwned || owner ? (\r\n            <del>{domain.name}</del>\r\n            ): (\r\n            <>{domain.name}</>\r\n            )}\r\n          </h3>\r\n\r\n          <p>\r\n            {domain.isOwned || owner ? (\r\n              <>\r\n                <small>\r\n                  Owned by:<br/>\r\n                  <span>\r\n                    {owner && owner.slice(0, 6) + '...' + owner.slice(38,42)}\r\n                  </span>\r\n                </small>\r\n              </>\r\n\r\n              ):(\r\n\r\n\r\n            <>\r\n            <strong>{ethers.utils.formatUnits(domain.cost.toString(), 'ether')}</strong>\r\n            ETH\r\n          </>\r\n        )}\r\n        </p>\r\n      </div>\r\n      {!domain.isOwned && !owner &&(\r\n\r\n      <button type=\"button\" className=\"card__button\" onClick={()=>buyHandler()}>\r\n      Buy Domain\r\n      </button>\r\n      )}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Domain;","import { useEffect, useState } from 'react'\r\nimport { ethers } from 'ethers'\r\n\r\n// Components\r\nimport Navigation from './components/Navigation'\r\nimport Search from './components/Search'\r\nimport Domain from './components/Domain'\r\n\r\n// ABIs\r\nimport ETHDaddy from './abis/ETHDaddy.json'\r\n\r\n// Config\r\nimport config from './config.json';\r\n\r\nfunction App() {\r\n  const [provider, setProvider] = useState(null)\r\n  const [account, setAccount] = useState(null) //react hook\r\n\r\n  const [ethDaddy, setETHDaddy] = useState(null)\r\n  const [domains, setDomains] = useState([])\r\n\r\n  const loadBlockchainData = async () =>{\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum) //link to blockchain ether connect to metamask metamask talk to blockchain\r\n    setProvider(provider)\r\n\r\n    const network = await provider.getNetwork()\r\n    console.log(network) //hardhat network\r\n\r\n    const ethDaddy = new ethers.Contract(config[network.chainId].ETHDaddy.address, ETHDaddy, provider)  //Javascript versoin of smart contract in ethers to list domains\r\n    setETHDaddy(ethDaddy)\r\n\r\n    const maxSupply = await ethDaddy.maxSupply()\r\n    //console.log(maxSupply.toString()) //shows all 6 domains\r\n    const domains = []\r\n\r\n    for (var i = 1; i <=  maxSupply; i++) {\r\n      const domain = await ethDaddy.getDomain(i)\r\n      domains.push(domain)\r\n    }\r\n\r\n    setDomains(domains)\r\n    //console.log(domains)\r\n\r\n    window.ethereum.on('accountsChanged', async () =>{\r\n      const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\r\n      const account = ethers.utils.getAddress(accounts[0])\r\n      setAccount(account);\r\n    })\r\n  }\r\n\r\n  useEffect(() => { //react hook - call blockchaindata when function APP gets rendered\r\n    loadBlockchainData()\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <Navigation account={account} setAccount={setAccount}/>\r\n        \r\n        <Search/>\r\n\r\n          <div className=\"cards__section\">\r\n\r\n            <h2 className=\"cards__title\">abcd</h2>\r\n            <p className=\"cards__description\">\r\n              abcdefgh\r\n            </p> \r\n\r\n            <hr />\r\n\r\n            <div className=\"cards\">\r\n              {domains.map((domain, index) => (\r\n                <Domain domain= {domain} ethDaddy={ethDaddy} provider={provider} id={index + 1} key={index} />\r\n\r\n\r\n                //<p key={index}>{domain.name}</p> - lists domains\r\n              ))}\r\n\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n/*window in console = object in js shows all infos of window that is shown\r\n    window.ethereum in console= connection provided to browser from metmask\r\n      metamask turn browser into blockchain browser to hold wallets and sign transactions\r\n        window.ethereum allows to fetch account into website\r\n        window.ethereum = direct communication with  metamask\r\n  metamask connects browser to blockchain , ->ethers connects clientside (userinterface, functions that client is able to use) to blockchain\r\n\r\n    */\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}